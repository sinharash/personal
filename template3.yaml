apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: final-picker-demo-template
  title: Final Enhanced Entity Picker Demo
  description: A template demonstrating the definitive custom entity picker.
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Component Details
      required:
        - componentName
        - secondaryOwner
      properties:
        componentName:
          title: Component Name
          type: string
          description: A unique name for the component.
          ui:autofocus: true

        # --- 1. THE VISIBLE FIELD (for the User) ---
        # Its value will be just a simple string, which makes the review step look clean.
        secondaryOwner:
          title: Secondary Owner
          type: string # This field holds only the display string.
          description: Please choose a secondary owner.
          ui:field: EnhancedEntityPicker # Our component is attached here.
          ui:options:
            # This ui:option tells our component which hidden field to write the rich data to.
            outputTargetField: "secondaryOwnerData"
            # This map defines what data gets put into that hidden field.
            output:
              # Define all the data points the developer might need.
              ref: "${entity.ref}" # Special keyword for the entity reference string
              email: "${spec.profile.email}"
              displayName: "${spec.profile.displayName}"
              name: "${metadata.name}"
              # This key defines what the user will see in the picker itself.
              displayValue: "${spec.profile.displayName} (${metadata.name})"

        # --- 2. THE HIDDEN FIELD (for the Developer) ---
        # This object is never shown in the UI, not even on the review page.
        secondaryOwnerData:
          title: Data for the selected owner
          type: object
          ui:widget: "hidden" # This hides the parameter from the entire UI.

  steps:
    - id: log-data
      name: Log Selected Data
      action: debug:log
      input:
        message: |
          --- DEBUGGING PICKER OUTPUT ---
          The value the user saw and selected is: ${{ parameters.secondaryOwner }}

          The hidden data object for the developer is: ${{ parameters.secondaryOwnerData | dump }}

          The ref for the backend is: ${{ parameters.secondaryOwnerData.ref }}
          The email is: ${{ parameters.secondaryOwnerData.email }}
          ---------------------------------

    - id: fetch-user
      name: Fetch User Entity
      action: catalog:fetch
      input:
        # Use the 'ref' from the hidden data object.
        entityRef: ${{ parameters.secondaryOwnerData.ref }}
