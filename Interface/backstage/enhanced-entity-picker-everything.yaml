apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: entity-picker-comprehensive-test
  title: EntityPicker Comprehensive Test Template
  description: Tests all features of the Backstage EntityPicker component
  tags:
    - test
    - entity-picker
    - comprehensive
spec:
  owner: backstage/techdocs-core
  type: test
  parameters:
    - title: Basic EntityPicker Features
      properties:
        # Test 1: Default EntityPicker with no options
        basicEntity:
          title: Basic Entity (Default)
          type: string
          description: Default EntityPicker with no options specified
          ui:field: EntityPicker

        # Test 2: Entity picker with custom description
        entityWithDescription:
          title: Entity with UI Description
          type: string
          ui:field: EntityPicker
          ui:description: This is a custom description from ui:description that should appear as helper text

        # Test 3: Required entity field
        requiredEntity:
          title: Required Entity
          type: string
          description: This field is required
          ui:field: EntityPicker
      required:
        - requiredEntity

    - title: Arbitrary Values Control
      properties:
        # Test 4: Allow arbitrary values (explicit true)
        allowArbitraryTrue:
          title: Allow Arbitrary Values (True)
          type: string
          description: You can type any value, not just existing entities
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: true

        # Test 5: Disallow arbitrary values
        allowArbitraryFalse:
          title: Allow Arbitrary Values (False)
          type: string
          description: You can only select existing entities from the catalog
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false

    - title: Default Values Configuration
      properties:
        # Test 6: Default kind
        defaultKindSystem:
          title: Default Kind (System)
          type: string
          description: When typing arbitrary values, defaults to System kind
          ui:field: EntityPicker
          ui:options:
            defaultKind: System
            allowArbitraryValues: true

        # Test 7: Default namespace
        customNamespace:
          title: Custom Default Namespace
          type: string
          description: Uses 'production' as default namespace instead of 'default'
          ui:field: EntityPicker
          ui:options:
            defaultNamespace: production
            allowArbitraryValues: true

        # Test 8: Both default kind and namespace
        fullDefaults:
          title: Full Default Configuration
          type: string
          description: API kind in external namespace by default
          default: "API:external/my-api"
          ui:field: EntityPicker
          ui:options:
            defaultKind: API
            defaultNamespace: external
            allowArbitraryValues: true

    - title: Basic Filtering - Single Kind
      properties:
        # Test 9: Filter by single kind using catalogFilter
        componentOnly:
          title: Components Only
          type: string
          description: Shows only Component entities
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component

        # Test 10: Filter by different kind
        systemOnly:
          title: Systems Only
          type: string
          description: Shows only System entities
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: System

        # Test 11: Legacy allowedKinds (deprecated but still supported)
        legacyAllowedKinds:
          title: Groups Only (Legacy allowedKinds)
          type: string
          description: Uses deprecated allowedKinds - should still work
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Group

    - title: Multiple Kind Filtering
      properties:
        # Test 12: Multiple kinds array
        multipleKinds:
          title: Groups and Users
          type: string
          description: Shows both Group and User entities
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User

        # Test 13: Many kinds
        manyKinds:
          title: Multiple Entity Types
          type: string
          description: Components, APIs, Systems, and Resources
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Component
                - API
                - System
                - Resource

    - title: Advanced Filtering - Spec Fields
      properties:
        # Test 14: Filter by spec.type
        serviceComponents:
          title: Service Components Only
          type: string
          description: Only shows components with spec.type = service
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component
              spec.type: service

        # Test 15: Filter groups by type
        teamGroups:
          title: Team Groups Only
          type: string
          description: Only shows groups with spec.type = team
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Group
              spec.type: team

        # Test 16: Multiple spec filters
        productionWebsites:
          title: Production Websites
          type: string
          description: Components that are websites in production
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component
              spec.type: website
              spec.lifecycle: production

    - title: Metadata Filtering
      properties:
        # Test 17: Filter by namespace
        defaultNamespaceOnly:
          title: Default Namespace Entities
          type: string
          description: Only shows entities in the default namespace
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.namespace: default

        # Test 18: Filter by custom namespace
        productionNamespace:
          title: Production Namespace Entities
          type: string
          description: Only shows entities in the production namespace
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.namespace: production

        # Test 19: Filter by tags
        frontendTagged:
          title: Frontend Tagged Entities
          type: string
          description: Only shows entities tagged with 'frontend'
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.tags: frontend

        # Test 20: Multiple tags
        multipleTagsFilter:
          title: Multiple Tags Filter
          type: string
          description: Entities with either frontend or backend tags
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.tags:
                - frontend
                - backend

    - title: Label and Annotation Filtering
      properties:
        # Test 21: Filter by label
        labelFilter:
          title: Filter by Label
          type: string
          description: Entities with specific label
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.labels.environment: production

        # Test 22: Filter by annotation
        annotationFilter:
          title: Filter by Annotation
          type: string
          description: Entities with specific annotation
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.annotations.backstage.io/managed-by-location: url:https://github.com/backstage/backstage

    - title: Existence Filters
      properties:
        # Test 23: Has description (exists filter)
        hasDescription:
          title: Entities with Description
          type: string
          description: Only shows entities that have a description field
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.description:
                exists: true

        # Test 24: Has spec.owner
        hasOwner:
          title: Entities with Owner
          type: string
          description: Only shows entities that have an owner defined
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              spec.owner:
                exists: true

        # Test 25: Has links
        hasLinks:
          title: Entities with Links
          type: string
          description: Only shows entities that have links defined
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              metadata.links:
                exists: true

    - title: Complex Array Filters (OR conditions)
      properties:
        # Test 26: Multiple filter objects (OR condition)
        servicesOrWebsites:
          title: Services OR Websites
          type: string
          description: Shows components that are either services OR websites
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: service
              - kind: Component
                spec.type: website

        # Test 27: Complex OR filter
        complexOrFilter:
          title: Complex OR Filter
          type: string
          description: Production services OR staging websites OR any system
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: service
                spec.lifecycle: production
              - kind: Component
                spec.type: website
                spec.lifecycle: staging
              - kind: System

    - title: Relation Filters
      properties:
        # Test 28: Filter by relation
        ownedByTeamA:
          title: Owned by Team A
          type: string
          description: Entities owned by team-a
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              relations.ownedBy: group:default/team-a

        # Test 29: Multiple owners
        multipleOwners:
          title: Multiple Possible Owners
          type: string
          description: Entities owned by either team-a or team-b
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              relations.ownedBy:
                - group:default/team-a
                - group:default/team-b

    - title: Combined Filters and Edge Cases
      properties:
        # Test 30: Everything combined
        complexFilter:
          title: Complex Combined Filter
          type: string
          description: Production components with owner, tags, and description
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            defaultKind: Component
            defaultNamespace: default
            catalogFilter:
              kind: Component
              spec.lifecycle: production
              spec.owner:
                exists: true
              metadata.description:
                exists: true
              metadata.tags:
                - critical
                - production

        # Test 31: Disabled field
        disabledEntity:
          title: Disabled EntityPicker
          type: string
          description: This picker is disabled
          default: "Component:default/example-website"
          ui:field: EntityPicker
          ui:disabled: true

        # Test 32: With all legacy options
        legacyComplete:
          title: Legacy Options Test
          type: string
          description: Testing with legacy allowedKinds plus new options
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Component
              - System
            defaultKind: Component
            defaultNamespace: legacy
            allowArbitraryValues: true

    - title: Field Arrays (Testing EntityPicker in arrays)
      properties:
        # Test 33: Array of entities
        multipleEntities:
          title: Multiple Entities
          type: array
          description: Select multiple entities
          items:
            type: string
            title: Entity
            ui:field: EntityPicker
            ui:options:
              catalogFilter:
                kind: Component

        # Test 34: Required array with constraints
        requiredComponents:
          title: Required Components (min 2)
          type: array
          description: Must select at least 2 components
          minItems: 2
          maxItems: 5
          items:
            type: string
            ui:field: EntityPicker
            ui:options:
              allowArbitraryValues: false
              catalogFilter:
                kind: Component

        # Test 35: EntityPicker with scaffolderTranslationRef usage
        withTranslation:
          title: With Translation Support
          type: string
          description: Tests translation functionality if available
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Component

  steps:
    - id: log
      name: Log All Entity Selections
      action: debug:log
      input:
        message: |
          EntityPicker Comprehensive Test Results:

          === Basic Features ===
          Basic Entity: ${{ parameters.basicEntity }}
          With Description: ${{ parameters.entityWithDescription }}
          Required Entity: ${{ parameters.requiredEntity }}

          === Arbitrary Values ===
          Allow Arbitrary (True): ${{ parameters.allowArbitraryTrue }}
          Allow Arbitrary (False): ${{ parameters.allowArbitraryFalse }}

          === Default Values ===
          Default Kind System: ${{ parameters.defaultKindSystem }}
          Custom Namespace: ${{ parameters.customNamespace }}
          Full Defaults: ${{ parameters.fullDefaults }}

          === Single Kind Filters ===
          Components Only: ${{ parameters.componentOnly }}
          Systems Only: ${{ parameters.systemOnly }}
          Legacy Allowed Kinds: ${{ parameters.legacyAllowedKinds }}

          === Multiple Kinds ===
          Groups and Users: ${{ parameters.multipleKinds }}
          Many Kinds: ${{ parameters.manyKinds }}

          === Spec Filters ===
          Service Components: ${{ parameters.serviceComponents }}
          Team Groups: ${{ parameters.teamGroups }}
          Production Websites: ${{ parameters.productionWebsites }}

          === Metadata Filters ===
          Default Namespace: ${{ parameters.defaultNamespaceOnly }}
          Production Namespace: ${{ parameters.productionNamespace }}
          Frontend Tagged: ${{ parameters.frontendTagged }}
          Multiple Tags: ${{ parameters.multipleTagsFilter }}

          === Labels & Annotations ===
          Label Filter: ${{ parameters.labelFilter }}
          Annotation Filter: ${{ parameters.annotationFilter }}

          === Existence Filters ===
          Has Description: ${{ parameters.hasDescription }}
          Has Owner: ${{ parameters.hasOwner }}
          Has Links: ${{ parameters.hasLinks }}

          === Complex Filters ===
          Services or Websites: ${{ parameters.servicesOrWebsites }}
          Complex OR: ${{ parameters.complexOrFilter }}

          === Relations ===
          Owned by Team A: ${{ parameters.ownedByTeamA }}
          Multiple Owners: ${{ parameters.multipleOwners }}

          === Edge Cases ===
          Complex Filter: ${{ parameters.complexFilter }}
          Disabled: ${{ parameters.disabledEntity }}
          Legacy Complete: ${{ parameters.legacyComplete }}

          === Arrays ===
          Multiple Entities: ${{ parameters.multipleEntities }}
          Required Components: ${{ parameters.requiredComponents }}

  output:
    remoteUrl: "https://github.com/backstage/backstage"
    entityRef: ${{ parameters.basicEntity }}
