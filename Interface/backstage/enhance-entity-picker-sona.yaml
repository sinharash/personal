# Comprehensive Test YAML for EnhancedEntityPicker
# This file tests all EntityPicker features discovered from Backstage documentation

apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: enhanced-entity-picker-test
  title: Enhanced Entity Picker Test Template
  description: Comprehensive test template for all EntityPicker features
  tags:
    - testing
    - entity-picker
    - enhanced
spec:
  owner: engineering-team
  type: test
  parameters:
    # Test 1: Basic Entity Selection
    - title: "Test 1: Basic Entity Selection"
      properties:
        basicEntity:
          title: Basic Entity
          type: string
          description: Basic entity selection without specific options
          ui:field: EnhancedEntityPicker

    # Test 2: Allow Arbitrary Values (Default: true)
    - title: "Test 2: Arbitrary Values Control"
      properties:
        entityWithArbitraryTrue:
          title: Entity with Arbitrary Values Allowed
          type: string
          description: Allows both entity selection and custom text input
          ui:field: EnhancedEntityPicker
          ui:options:
            allowArbitraryValues: true

        entityWithArbitraryFalse:
          title: Entity with Arbitrary Values Disabled
          type: string
          description: Only allows selection from existing entities
          ui:field: EnhancedEntityPicker
          ui:options:
            allowArbitraryValues: false

    # Test 3: Default Kind and Namespace
    - title: "Test 3: Default Values"
      properties:
        componentEntity:
          title: Component Entity (Default Kind)
          type: string
          description: Entity picker with default kind set to Component
          ui:field: EnhancedEntityPicker
          ui:options:
            defaultKind: Component
            defaultNamespace: default

        systemEntity:
          title: System Entity
          type: string
          description: Entity picker with default kind set to System
          ui:field: EnhancedEntityPicker
          ui:options:
            defaultKind: System
            defaultNamespace: production

    # Test 4: Legacy allowedKinds Option
    - title: "Test 4: Legacy Allowed Kinds"
      properties:
        userGroupEntity:
          title: User or Group Entity
          type: string
          description: Uses legacy allowedKinds option for User and Group
          ui:field: EnhancedEntityPicker
          ui:options:
            allowedKinds:
              - User
              - Group

        componentServiceEntity:
          title: Component or Service Entity
          type: string
          description: Allow only Components and Services
          ui:field: EnhancedEntityPicker
          ui:options:
            allowedKinds:
              - Component
              - Service

    # Test 5: Modern catalogFilter - Single Filter
    - title: "Test 5: Modern Catalog Filter - Single"
      properties:
        groupEntity:
          title: Group Entities Only
          type: string
          description: Filter to show only Group entities
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Group

        teamGroups:
          title: Team Type Groups
          type: string
          description: Filter groups with spec.type = team
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Group
              spec.type: team

        productionComponents:
          title: Production Components
          type: string
          description: Components in production lifecycle
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Component
              spec.lifecycle: production

    # Test 6: Advanced catalogFilter with exists
    - title: "Test 6: Advanced Filters"
      properties:
        entitiesWithOwner:
          title: Entities with Owner
          type: string
          description: Entities that have an owner specified
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              spec.owner: { exists: true }

        githubAnnotatedEntities:
          title: GitHub Annotated Entities
          type: string
          description: Entities with GitHub annotations
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              metadata.annotations.github.com/project-slug: { exists: true }

    # Test 7: Multiple catalogFilter (Array Format)
    - title: "Test 7: Multiple Catalog Filters"
      properties:
        usersAndTeamGroups:
          title: Users and Team Groups
          type: string
          description: Show Users and Groups of type team
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              - kind: User
              - kind: Group
                spec.type: team

        multiKindWithAnnotations:
          title: Components and APIs with GitHub
          type: string
          description: Components and APIs with GitHub annotations
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                metadata.annotations.github.com/project-slug: { exists: true }
              - kind: API
                metadata.annotations.github.com/project-slug: { exists: true }

    # Test 8: Namespace Filtering
    - title: "Test 8: Namespace Filtering"
      properties:
        defaultNamespaceEntities:
          title: Default Namespace Entities
          type: string
          description: Entities in default namespace only
          ui:field: EnhancedEntityPicker
          ui:options:
            defaultNamespace: default
            catalogFilter:
              metadata.namespace: default

        paymentNamespaceEntities:
          title: Payment Namespace Entities
          type: string
          description: Entities in payment namespace
          ui:field: EnhancedEntityPicker
          ui:options:
            defaultNamespace: payment
            catalogFilter:
              metadata.namespace: payment

    # Test 9: Complex Multi-field Filters
    - title: "Test 9: Complex Filters"
      properties:
        backendServices:
          title: Backend Services
          type: string
          description: Service components with backend tag
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Component
              spec.type: service
              metadata.tags: backend

        ownedByTeam:
          title: Team-Owned Components
          type: string
          description: Components owned by specific teams
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Component
              spec.owner:
                - team-alpha
                - team-beta
                - team-gamma

    # Test 10: Required vs Optional Fields
    - title: "Test 10: Field Requirements"
      required:
        - requiredEntity
      properties:
        requiredEntity:
          title: Required Entity Selection
          type: string
          description: This entity selection is required
          ui:field: EnhancedEntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              kind: Component

        optionalEntity:
          title: Optional Entity Selection
          type: string
          description: This entity selection is optional
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Service

    # Test 11: All Entity Kinds
    - title: "Test 11: All Entity Kinds"
      properties:
        anyComponent:
          title: Any Component
          type: string
          description: Select any component entity
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Component

        anyAPI:
          title: Any API
          type: string
          description: Select any API entity
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: API

        anyResource:
          title: Any Resource
          type: string
          description: Select any resource entity
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Resource

        anySystem:
          title: Any System
          type: string
          description: Select any system entity
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: System

        anyDomain:
          title: Any Domain
          type: string
          description: Select any domain entity
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind: Domain

    # Test 12: Edge Cases and Combinations
    - title: "Test 12: Edge Cases"
      properties:
        emptyFilter:
          title: Empty Filter
          type: string
          description: Entity picker with empty filter (should show all)
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter: {}

        multipleKinds:
          title: Multiple Kinds
          type: string
          description: Allow multiple kinds selection
          ui:field: EnhancedEntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Component
                - Service
                - API

        withDefaultAndFilter:
          title: Default + Filter Combination
          type: string
          description: Combines default values with filtering
          ui:field: EnhancedEntityPicker
          ui:options:
            defaultKind: Component
            defaultNamespace: default
            allowArbitraryValues: false
            catalogFilter:
              kind: Component
              spec.lifecycle:
                - experimental
                - production

  steps:
    - id: debug
      name: Debug Output
      action: debug:log
      input:
        message: |
          Entity Picker Test Results:
          Basic Entity: ${{ parameters.basicEntity }}
          Arbitrary True: ${{ parameters.entityWithArbitraryTrue }}
          Arbitrary False: ${{ parameters.entityWithArbitraryFalse }}
          Component Entity: ${{ parameters.componentEntity }}
          System Entity: ${{ parameters.systemEntity }}
          User/Group Entity: ${{ parameters.userGroupEntity }}
          Component/Service: ${{ parameters.componentServiceEntity }}
          Group Only: ${{ parameters.groupEntity }}
          Team Groups: ${{ parameters.teamGroups }}
          Production Components: ${{ parameters.productionComponents }}
          Entities with Owner: ${{ parameters.entitiesWithOwner }}
          GitHub Annotated: ${{ parameters.githubAnnotatedEntities }}
          Users and Team Groups: ${{ parameters.usersAndTeamGroups }}
          Multi-kind with Annotations: ${{ parameters.multiKindWithAnnotations }}
          Default Namespace: ${{ parameters.defaultNamespaceEntities }}
          Payment Namespace: ${{ parameters.paymentNamespaceEntities }}
          Backend Services: ${{ parameters.backendServices }}
          Team Owned: ${{ parameters.ownedByTeam }}
          Required Entity: ${{ parameters.requiredEntity }}
          Optional Entity: ${{ parameters.optionalEntity }}
          Any Component: ${{ parameters.anyComponent }}
          Any API: ${{ parameters.anyAPI }}
          Any Resource: ${{ parameters.anyResource }}
          Any System: ${{ parameters.anySystem }}
          Any Domain: ${{ parameters.anyDomain }}
          Empty Filter: ${{ parameters.emptyFilter }}
          Multiple Kinds: ${{ parameters.multipleKinds }}
          Default + Filter: ${{ parameters.withDefaultAndFilter }}
