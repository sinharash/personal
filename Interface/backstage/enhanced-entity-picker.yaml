apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: enhanced-entity-picker-demo
  title: Enhanced Entity Picker Demo
  description: Demonstrates the enhanced entity picker functionality
  tags:
    - demo
    - entity-picker
spec:
  owner: platform-team
  type: service
  
  parameters:
    - title: "Team Setup"
      properties:
        # Project Owner selection
        projectOwner:
          title: Project Owner
          type: string
          ui:field: EnhancedEntityPicker
          ui:options:
            displayEntityFieldAfterFormatting: "{{ metadata.title }} - {{ spec.profile.email }}"
            catalogFilter:
              kind: User
            hiddenFieldName: "projectOwnerEntityRef"
        
        # Resource Account selection  
        resourceTeam:
          title: Resource Account
          type: string
          ui:field: EnhancedEntityPicker
          ui:options:
            displayEntityFieldAfterFormatting: "{{ metadata.signatory }}"
            catalogFilter:
              kind: Resource
            hiddenFieldName: "resourceTeamEntityRef"
            
        # System selection
        baseSystem:
          title: Base Component
          type: string
          ui:field: EnhancedEntityPicker
          ui:options:
            displayEntityFieldAfterFormatting: "{{ metadata.title }} || {{ metadata.name }}"
            catalogFilter:
              kind: System
            hiddenFieldName: "baseSystemEntityRef"
            
        # Service selection with custom identifier
        parentService:
          title: Parent Service
          type: string
          ui:field: EnhancedEntityPicker
          ui:options:
            displayEntityFieldAfterFormatting: "{{ metadata.title }} ({{ spec.type }})"
            catalogFilter:
              kind: Component
              type: service
            uniqueIdentifierField: "metadata.name"
            placeholder: "Select a parent service..."
            hiddenFieldName: "parentServiceEntityRef"

    # Hidden fields to store entity references
    - title: "Hidden Entity References"
      properties:
        projectOwnerEntityRef:
          type: string
          ui:widget: hidden
        resourceTeamEntityRef:
          type: string
          ui:widget: hidden
        baseSystemEntityRef:
          type: string
          ui:widget: hidden
        parentServiceEntityRef:
          type: string
          ui:widget: hidden

  steps:
    # Fetch all entities to get complete information
    - id: fetch-user
      name: "Get Project User"
      action: catalog:fetch
      input:
        entityRef: "${{ parameters.projectOwnerEntityRef }}"
      
    - id: fetch-resource
      name: "Get Resource Name"
      action: catalog:fetch
      input:
        entityRef: "${{ parameters.resourceTeamEntityRef }}"
        
    - id: fetch-system
      name: "Get System"
      action: catalog:fetch
      input:
        entityRef: "${{ parameters.baseSystemEntityRef }}"
        
    - id: fetch-service
      name: "Get Parent Service"
      action: catalog:fetch
      input:
        entityRef: "${{ parameters.parentServiceEntityRef }}"

    # Show the works - USER
    - id: show-success-fetch-user
      name: "✅ Show Success Fetch User"
      action: debug:log
      input:
        message: |
          
          📋 Full User Details:
          - 👤 Name: ${{ steps['fetch-user'].output.entity.metadata.name }}
          - 📧 Email: ${{ steps['fetch-user'].output.entity.spec.profile.email }}
          - 🏢 Department: ${{ steps['fetch-user'].output.entity.spec.profile.department }}
          - 🖼️ Picture: ${{ steps['fetch-user'].output.entity.spec.profile.picture }}
          
    # Show the works - RESOURCE  
    - id: show-success-fetch-resource
      name: "📋 Show Success Fetch Resource"
      action: debug:log
      input:
        message: |
          
          📋 Full Resource Details:
          - 📊 Entity Group: ${{ steps['fetch-resource'].output.entity.metadata.entre_admin_group }}
          - 🏛️ Admins: ${{ steps['fetch-resource'].output.entity.metadata.admins }}
          - 📝 Type: ${{ steps['fetch-resource'].output.entity.spec.type }}
          
    # Show the works - SYSTEM
    - id: show-success-fetch-system  
      name: "📋 Show Success Fetch System"
      action: debug:log
      input:
        message: |
          
          📋 Full System Details:
          - 📖 Description: ${{ steps['fetch-system'].output.entity.metadata.description }}
          - 🏢 Business Director: ${{ steps['fetch-system'].output.entity.metadata.businessDirector }}
          - 🔗 URL: ${{ steps['fetch-system'].output.entity.metadata.links.url }}

    # Generate files using the complete entity information
    - id: fetch
      name: Create Project Files
      action: fetch:template
      input:
        url: ./content
        values:
          # Original parameters
          projectOwner: ${{ parameters.projectOwner }}
          resourceTeam: ${{ parameters.resourceTeam }}
          baseSystem: ${{ parameters.baseSystem }}
          parentService: ${{ parameters.parentService }}
          
          # Complete entity information
          projectOwnerDetails:
            name: ${{ steps['fetch-user'].output.entity.metadata.name }}
            email: ${{ steps['fetch-user'].output.entity.spec.profile.email }}
            department: ${{ steps['fetch-user'].output.entity.spec.profile.department }}
            
          resourceTeamDetails:
            adminGroup: ${{ steps['fetch-resource'].output.entity.metadata.entre_admin_group }}
            admins: ${{ steps['fetch-resource'].output.entity.metadata.admins }}
            type: ${{ steps['fetch-resource'].output.entity.spec.type }}
            
          baseSystemDetails:
            description: ${{ steps['fetch-system'].output.entity.metadata.description }}
            businessDirector: ${{ steps['fetch-system'].output.entity.metadata.businessDirector }}
            url: ${{ steps['fetch-system'].output.entity.metadata.links.url }}
            
          parentServiceDetails:
            title: ${{ steps['fetch-service'].output.entity.metadata.title }}
            type: ${{ steps['fetch-service'].output.entity.spec.type }}
            lifecycle: ${{ steps['fetch-service'].output.entity.spec.lifecycle }}

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}