# The API version for the scaffolder template
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template

# Metadata about the template itself
metadata:
  name: final-entity-picker-workflow
  title: Final Entity Picker Workflow
  description: A template demonstrating a clean UX with a robust backend entity resolution.
spec:
  owner: user:guest # Change to a valid owner in your Backstage instance
  type: service

  # The parameters block defines the form fields presented to the user.
  parameters:
    - title: Select an Owner
      required:
        - selectedEntity
      properties:
        selectedEntity:
          title: Choose an Owner
          type: string # This field's value will be the combined string, e.g., "John Doe (Engineering)|||jdoe"
          description: Select an entity from the list.
          ui:field: EnhancedEntityPicker # Invokes your custom frontend component

          # --- Configuration for your custom picker ---
          ui:options:
            # The developer has complete freedom here. `metadata.name` is NOT required for display.
            displayEntityFieldAfterFormatting: "${{ metadata.title }} (Department: ${{ spec.profile.department }})"

            # The catalogFilter is still needed to fetch the list and to tell the backend action the entity's 'kind'.
            catalogFilter:
              kind: User

  # These are the backend steps that run after the user clicks "CREATE".
  steps:
    # STEP 1: Your custom action is now simpler and more reliable.
    # It no longer needs a 'displayTemplate' input.
    - id: extract-reference
      name: Resolve Entity From Display Value
      action: enhanced:resolveEntity
      input:
        # Pass the combined string from the form ('displayValue|||metadata.name')
        displayValue: ${{ parameters.selectedEntity }}
        # Pass the filter so the action knows the 'kind' to use for the entity ref.
        catalogFilter:
          kind: User
        # Optionally, pass a namespace if it's not 'default'.
        # entityNamespace: 'my-namespace'

    # STEP 2: Use the reliably extracted entityRef to fetch the full entity.
    - id: fetch-entity
      name: Fetch Full Entity Data
      action: catalog:fetch
      input:
        entityRef: ${{ steps['extract-reference'].output.entityRef }}

    # STEP 3: Log the results to confirm everything worked perfectly.
    - id: show-result
      name: Show Final Result
      action: debug:log
      input:
        message: |
          ‚úÖ --- WORKFLOW SUCCESSFUL --- ‚úÖ

          ‚û°Ô∏è User Selected (Visible Part): "${{ steps['extract-reference'].output.displayValue }}"

          üîß Extracted via Action:
            - Hidden metadata.name: "${{ steps['extract-reference'].output.extractedName }}"
            - Constructed Entity Ref: "${{ steps['extract-reference'].output.entityRef }}"

          üìã Full Data Fetched from Catalog:
            - Name: ${{ steps['fetch-entity'].output.entity.metadata.name | default('NOT FOUND') }}
            - Title: ${{ steps['fetch-entity'].output.entity.metadata.title | default('NOT FOUND') }}
            - Department: ${{ steps['fetch-entity'].output.entity.spec.profile.department | default('NOT FOUND') }}
            - Email: ${{ steps['fetch-entity'].output.entity.spec.profile.email | default('NOT FOUND') }}
